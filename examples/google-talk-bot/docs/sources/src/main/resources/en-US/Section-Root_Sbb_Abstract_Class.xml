<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JAIN_SLEE_Example_User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="root_sbb_abstract_class">
			<title>The Root SBB Abstract Class</title>
			<para> The class <literal>GoogleTalkBotSbb</literal> includes all the service logic for the example.</para>
		
			<section id="root_sbb_abstract_class_setSbbContext">
				<title>The setSbbContext(SbbContext) method</title>
				<para>The <literal>javax.slee.SbbObject</literal>'s <literal>setSbbContext(SbbContext)</literal> is used by SBBs to store the SBB's context into a class field. The SBB should take the opportunity to also store objects, such as SLEE facilities, or env entries property values, which are common for all service logic entities, a.k.a. SbbEntities, and thus may be stored in the SbbObject instance.</para>
            	
            	<para>The class fields and <literal>setSbbContext(SbbContext)</literal> method's and related code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	/*
	 * (non-Javadoc)
	 * 
	 * @see javax.slee.Sbb#setSbbContext(javax.slee.SbbContext)
	 */
	public void setSbbContext(SbbContext context) {
		this.sbbContext = context;
		this.tracer = sbbContext.getTracer(getClass().getSimpleName());
		try {
			Context myEnv = (Context) new InitialContext()
					.lookup("java:comp/env");

			xmppSbbInterface = (XmppResourceAdaptorSbbInterface) myEnv
					.lookup("slee/resources/xmpp/2.0/xmppinterface");
			xmppActivityContextInterfaceFactory = (XmppActivityContextInterfaceFactory) myEnv
					.lookup("slee/resources/xmpp/2.0/factoryprovider");
			// env-entries
			username = (String) myEnv.lookup("username");
			password = (String) myEnv.lookup("password");

			tracer.info("setSbbContext() Retrieved uid[" + username + "],"
					+ " passwd[" + password + "]");
		} catch (NamingException ne) {
			tracer.severe("Could not set SBB context:" + ne.getMessage(), ne);
		}
	}]]>
            	</programlisting>
        	</section>
        
        	<section id="root_sbb_abstract_class_servicestarted_event_handler">
				<title>The ServiceStartedEvent Handler Method</title>
				<para>The ServiceStartedEvent is fired by the SLEE Container when the service activation is complete, in the example that is the time to connect to Google Talk Server.</para>
            	
            	<para>The event handler method's code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	/**
	 * Init the xmpp connection to GOOGLE TALK when the service is activated by
	 * SLEE
	 * 
	 * @param event
	 * @param aci
	 */
	public void onStartServiceEvent(
			javax.slee.serviceactivity.ServiceStartedEvent event,
			ActivityContextInterface aci) {
		try {
			// connect to google talk xmpp server
			XmppConnection connection = xmppSbbInterface.connectClient(
					connectionID, serviceHost, servicePort, serviceName,
					username, password, resource, Arrays
							.asList(packetsToListen));
			xmppActivityContextInterfaceFactory.getActivityContextInterface(
					connection).attach(sbbContext.getSbbLocalObject());
		} catch (XMPPException e) {
			tracer.severe("Connection to server failed!",e);
		}
	}]]>
            	</programlisting>
        	</section>
        	
        	<section id="root_sbb_abstract_class_activity_end_event_handler">
				<title>The ActivityEndEvent Handler Method</title>
				<para>The ActivityEndEvent is fired by the SLEE Container whenever an activity ends. Regarding the example application, it needs to close the XMPP connection when the service is deactivated, and for an SBB the only way to known this happen is by checking for ActivityEndEvents on the ServiceActivity.</para>
            	
            	<para>The event handler method's code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	/**
	 * Handler to disconnect from Google when the service is being deactivated.
	 * 
	 * @param event
	 * @param aci
	 */
	public void onActivityEndEvent(ActivityEndEvent event,
			ActivityContextInterface aci) {
		if (aci.getActivity() instanceof ServiceActivity) {
			try {
				xmppSbbInterface.disconnect(connectionID);
			} catch (Exception e) {
				tracer.severe(e.getMessage(), e);
			}
		}
	}]]>
            	</programlisting>
        	</section>
        	
        	<section id="root_sbb_abstract_class_presence_event_handler">
				<title>The Presence Event Handler Method</title>
				<para>The Presence event indicates that an XMPP <literal>PRESENCE</literal> stanza was received in the managed XMPP connection. The application simply checks if its <literal>TYPE</literal> is <literal>available</literal>, and if that is the case the <literal>Hi, I'm online too!</literal> message is sent back to the sender.</para>
            	
            	<para>The event handler method's code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	/**
	 * Here we handle the Presence messages.
	 * 
	 * @param packet
	 * @param aci
	 */
	public void onPresence(org.jivesoftware.smack.packet.Presence packet,
			ActivityContextInterface aci) {
		tracer.info("XMPP Presence event type! Status: '" + packet.getType()
				+ "'. " + "Sent by '" + packet.getFrom() + "'.");
		// reply hello msg if receives notification of available presence state
		if (packet.getType() == Presence.Type.AVAILABLE) {
			Message msg = new Message(packet.getFrom(), Message.Type.CHAT);
			msg.setBody("Hi. I'am online too.");
			xmppSbbInterface.sendPacket(connectionID, msg);
		}
	}]]>
            	</programlisting>
        	</section>
        	
        	<section id="root_sbb_abstract_class_message_event_handler">
				<title>The Message Event Handler Method</title>
				<para>The Message event indicates that an XMPP <literal>MESSAGE</literal> stanza was received in the managed XMPP connection. The application simply checks if its <literal>body</literal> is <literal>time</literal>, and if that is the case sends back the system time, otherwise sends the count of chars received..</para>
            	
            	<para>The event handler method's code:</para>
            	<programlisting language="Java" role="JAVA"><![CDATA[
	/**
	 * This is the point where we already have a chat session with the user, so,
	 * when they send us messages, we count the chars and reply or tell time :)
	 * 
	 * @param message
	 * @param aci
	 */
	public void onMessage(org.jivesoftware.smack.packet.Message message,
			ActivityContextInterface aci) {
		// only process messages which are not an error and not sent by another
		// bot instance
		if (!message.getType().equals(Message.Type.ERROR)
				&& !StringUtils.parseBareAddress(message.getFrom()).equals(
						username + "@" + serviceName)) {
			tracer.info("XMPP Message event type! Message Body: '"
					+ message.getBody() + "'. " + "Sent by '"
					+ message.getFrom() + "'.");
			String body = null;
			if (message.getBody() != null) {
				if (message.getBody().equalsIgnoreCase("time")) {
					body = "My system time is " + new Date().toString();
				} else {
					body = message.getBody().length() + " chars in message <"
							+ message.getBody() + ">.";
				}
			}
			Message msg = new Message(message.getFrom(), message.getType());
			msg.setBody(body);
			xmppSbbInterface.sendPacket(connectionID, msg);
		}
	}]]>
            	</programlisting>
        	</section>
        	
		</section>	